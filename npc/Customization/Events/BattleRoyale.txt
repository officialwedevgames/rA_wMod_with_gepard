
prontera,147,174,4	script	Battle Royale Manager::Battle_Royale	4_M_JP_RUN,{
	mes "[ Battle Royale Manager ]";
	mes "Welcome "+strcharinfo(0);
	mes "^0000ffBattle Royale^000000 is now active and open for participants. Check the game mode and join now.";
	next;
	switch(select("Join the Tournanament")) {
		case 1:
			mes "[ Battle Royale Manager ]";
			mes "Select a game mode.";
			next;
			switch(select(""+(($maxplayer > 1)?"Battle Royale [ Party ("+$maxplayer+" members) ]":"Battle Royale [ Solo ]")+"")) {
				case 1:
					mes "[ Battle Royale Manager ]";
					if(getpartyleader(getcharid(1),1) != getcharid(3)){
						mes "Tell your party leader to register.";
						close2;
					}
					if($maxplayer == 1){
						mes "Lets check your team.";
						close2;
						savepoint "poring_w02",170,176;
					}else{
						mes "Lets check your members.";
						next;
						mes "[ Battle Royale Manager ]";
						set .@leader, getcharid(1);
						set .nd,0;
						set .na,0;
						// get the charID and accountID of character's party members
						getpartymember .@leader, 1;
						getpartymember .@leader, 2;
						
						if ( callfunc("party_has_duplicate_job",.@leader) ) {
							mes "It seems that someone in the party has the same class than another member";
							close;
						}
						
						// loop through both and use 'isloggedin' to count online party members
						for ( .@i = 0; .@i < $@partymembercount; .@i++ )
							if ( isloggedin( $@partymemberaid[.@i], $@partymembercid[.@i] ) )
								.@count_online++;
				
						
						if(.@count_online == $maxplayer){
						
							query_sql "SELECT `leader_char`,`members` FROM `battle_royale_party` WHERE `leader_char` = '"+getcharid(0)+"'", .@leader_char, .@pmembers$;
							
							for ( .@k = 0; .@k < $@partymembercount; .@k++ ){
								if ( isloggedin( $@partymemberaid[.@k], $@partymembercid[.@k] ) ){
									if(.@leader_char && $br_party_continue){
										for ( .@a = 0; .@a < getarraysize(.@pmembers$); .@a++ ){
											explode(.@char_data$, .@pmembers$[.@a], ",");
											for ( .@x = 0; .@x < 2; .@x++ ){
												
												//- Check if they are still the old players.
												explode(.@data$, .@char_data$[.@x], ":");
												set .@chrid, .@data$[1];
												
												if($@partymembercid[.@k] ==.@chrid){
													set .@valid, 1;
													break;
												}else{
													set .@valid, 0;
												}

							
											}
												
											if(.@valid){
												savepoint "poring_w02",170,176,$@partymembercid[.@k];
												warp "poring_w02",170,176,$@partymembercid[.@k];
												set .@members$,  $@partymemberaid[.@k]+":"+$@partymembercid[.@k]+","+.@members$;
											}else{
												party_delmember $@partymembercid[.@k], .@leader;
											}
										}
									}else{
											savepoint "poring_w02",170,176,$@partymembercid[.@k];
											set .@members$,  $@partymemberaid[.@k]+":"+$@partymembercid[.@k]+","+.@members$;
									}
								}
							}


							if(.@leader_char && $br_party_continue){
								query_sql "UPDATE `battle_royale_party` SET `party_id` = '"+.@leader+"', `name` = '"+getpartyname(.@leader)+"', `members` = '"+.@members$+"' WHERE `leader_char` = '"+.@leader_char+"'";
							}else{
								query_sql "SELECT `party_id` FROM `battle_royale_party` WHERE `party_id` = '"+.@leader+"'", .@partyid;
								if(!.@partyid){
									query_sql "INSERT INTO `battle_royale_party`(`party_id`, `name`, `leader_id`, `leader_char`, `members`) VALUES ('"+.@leader+"','"+getpartyname(.@leader)+"','"+getpartyleader(.@leader,1)+"','"+getpartyleader(.@leader,2)+"','"+.@members$+"')";
								}
							}

							
							// Warp the party members.
							warpparty "poring_w02",170,176,.@leader;
							
						}else if($@partymembercount > $maxplayer){
							mes "Your party members are more than "+$maxplayer+".";
							close;
						}else if($@partymembercount < $maxplayer){
							mes "Your party members are not yet complete.";
							close;
						}else{
							mes "Your party members are not yet online.";
							close;
						}
						mes "There you go.. Enjoy.";
						close;
					}
				end;
			}
		close;
	}
	end;


OnInit:
	hideonnpc "Battle_Royale";
	bindatcmd "battleroyale","Battle_Royale::OnDoCommand",90,100;	
	//bindatcmd "brrank","Battle_Royale::OnDoRank",0,100;	
	bindatcmd "tests","Battle_Royale::OnDoTest",90,100;	
	
end;

OnDoTest:
						set .@leader, getcharid(1);

						// get the charID and accountID of character's party members
						getpartymember .@leader, 1;
						getpartymember .@leader, 2;
						
						
							query_sql "SELECT `leader_char`,`members` FROM `battle_royale_party` WHERE `leader_char` = '"+getcharid(0)+"'", .@leader_char, .@pmembers$;
							
							for ( .@k = 0; .@k < $@partymembercount; .@k++ ){
								if ( isloggedin( $@partymemberaid[.@k], $@partymembercid[.@k] ) ){
									if(.@leader_char && $br_party_continue){
										for ( .@a = 0; .@a < getarraysize(.@pmembers$); .@a++ ){
											explode(.@char_data$, .@pmembers$[.@a], ",");
											for ( .@x = 0; .@x < 2; .@x++ ){
												
												
												explode(.@data$, .@char_data$[.@x], ":");
												set .@chrid, .@data$[1];
												
												dispbottom $@partymembercid[.@k];
												dispbottom .@chrid;
												if($@partymembercid[.@k] ==.@chrid){
													set .@valid, 1;
													break;
												}else{
													set .@valid, 0;
												}

							
											}
												
											if(.@valid){
												savepoint "poring_w02",170,176,$@partymembercid[.@k];
												warp "poring_w02",170,176,$@partymembercid[.@k];
												set .@members$,  $@partymemberaid[.@k]+":"+$@partymembercid[.@k]+","+.@members$;
											}else{
												party_delmember $@partymembercid[.@k], .@leader;
											}
										}
									}else{
											savepoint "poring_w02",170,176,$@partymembercid[.@k];
											set .@members$,  $@partymemberaid[.@k]+":"+$@partymembercid[.@k]+","+.@members$;
									}
								}
							}
end;

OnDoCommand:
	if (compare(.@atcmd_parameters$, "mode")) {
		if (compare(.@atcmd_parameters$[1], "solo")) {
			set $maxplayer, 1;
			dispbottom "Battle Royale is now set to solo mode.";
		}else if (compare(.@atcmd_parameters$[1], "party")) {
			set $maxplayer, .@atcmd_parameters$[2];
			query_sql "SELECT `party_id` FROM `battle_royale_party`", .@partyid;
			if(.@partyid){
				set $br_party_continue,1;
			}
			dispbottom "Battle Royale is now set to party mode with "+$maxplayer+" members.";
		}else{
			dispbottom "Usage: @battleroyale mode solo";
			dispbottom "Usage: @battleroyale mode party <Amount of Members>";
		}
	}else if (compare(.@atcmd_parameters$, "start")) {
		if (compare(.@atcmd_parameters$[1], "solo")) {
			set $br_solo,1;
			if(!getmapflag("guild_vs1",mf_pvp)){
				pvpon "guild_vs1";
			}
			donpcevent "Battle_Royale::OnBattleSolo";
			dispbottom "Battle Royale Solo has started.";
		}else if (compare(.@atcmd_parameters$[1], "party")) {
			if($br_party){
				dispbottom "The match is still ongoing.";
				end;
			}else if(compare(.@atcmd_parameters$[2], "rr")){
				
				set $br_party_rounds,.@atcmd_parameters$[3];
				if($br_party_rounds < 1 || $br_party_rounds > 7){
					dispbottom "Usage: @battleroyale start party rr <1~7>";
					end;
				}
				set $br_party_mode$, "Round Robin"; 
				initnpctimer;
				dispbottom "Battle Royale Party has started.";
			}else if(compare(.@atcmd_parameters$[2], "br")){
				set $br_party_mode$, "Battle Royale";
				initnpctimer;
				dispbottom "Battle Royale Party has started.";
			}else{
				dispbottom "rr -> Round Robin";
				dispbottom "br -> Battle Royale";
				dispbottom "Usage: @battleroyale start party <rr/br> <rounds>";
			}
		}else{
			dispbottom "Usage: @battleroyale start <solo/party>";
		}
	}else if (compare(.@atcmd_parameters$, "end")) {
		if (compare(.@atcmd_parameters$[1], "solo")) {
			set $br_solo,0;
			if(getmapflag("guild_vs1",mf_pvp)){
				pvpoff "guild_vs1";
			}
			dispbottom "Battle Royale Solo has ended.";
		}else if (compare(.@atcmd_parameters$[1], "party")) {
			set $br_party_mode$, "";
			query_sql "UPDATE `battle_royale_party` SET `alive` = '0',`match_round_count` = '0', `match_round_status` = '0', `match_status` = '0'";
			donpcevent "Battle_Royale::OnBattlePartyEndTimer";
			dispbottom "Battle Royale Party has ended.";
		}else{
			dispbottom "Usage: @battleroyale end <solo/party>";
		}
	}else if (compare(.@atcmd_parameters$, "register")) {
		if (compare(.@atcmd_parameters$[1], "on")) {
			disablenpc "BattleRoyaleWarp";
			hideoffnpc "Battle_Royale";
			dispbottom "Battle Royale registration is now open.";
		}else if (compare(.@atcmd_parameters$[1], "off")) {
			disablenpc "BattleRoyaleWarp";
			hideonnpc "Battle_Royale";
			dispbottom "Battle Royale registration is now closed.";
		}else{
			dispbottom "Usage: @battleroyale register <on/off>";
		}
	}else if (compare(.@atcmd_parameters$, "reset")) {
		if (compare(.@atcmd_parameters$[1], "solo")) {
			query_sql "TRUNCATE `Battle_Royale`";
			dispbottom "Battle Royale Solo has been reset.";
		}else if (compare(.@atcmd_parameters$[1], "party")) {
			query_sql "TRUNCATE `battle_royale_party`";
			set $br_party_continue,0;
			set $br_party_mode$, "";
			dispbottom "Battle Royale Party has been reset.";
		}else{
			dispbottom "Usage: @battleroyale reset <solo/party>";
		}
		enablenpc "BattleRoyaleWarp";
	}else if(compare(.@atcmd_parameters$, "rank")){
		query_sql "SELECT `name`, `points` FROM `Battle_Royale` ORDER BY `points` DESC LIMIT 10", .name$, .@points;
		
		if(!getarraysize(.name$)){
			dispbottom "** NO AVAILABLE DATA **";	
		}else{
			dispbottom "** TOP 10 PLAYER **";	
			for(set .@i,0; .@i < getarraysize(.name$); set .@i,.@i+1) {
				dispbottom "[ Rank "+(.@i+1)+" ] "+.name$[.@i]+" [ "+.@points[.@i]+" ]";
			}
		}
	}else{
		dispbottom "Usage: @battleroyale <mode/start/end/reset/register>";
	}
end;

OnBattleSolo:
end;


OnBattlePartyCheck:
	if($br_party){
		query_sql "SELECT `party_id`, `name` FROM `battle_royale_party` WHERE `alive` > 0 AND `match_status` = '1'",.@countteam, .name$;
		
		set .@countteams, getarraysize(.@countteam);
		
		if(.@countteams == 1){
			for(set .@i,0; .@i < .@countteams; set .@i,.@i+1) {
				if($br_party){
					// get the charID and accountID of character's party members
					getpartymember .@countteam[.@i], 1;
					getpartymember .@countteam[.@i], 2;
					
					for ( .@k = 0; .@k < $@partymembercount; .@k++ ){
						if ( isloggedin( $@partymemberaid[.@k], $@partymembercid[.@k] ) ){
							attachrid($@partymemberaid[.@k]);
								if(strcharinfo(3) == "guild_vs4"){
									warp "SavePoint",0,0,$@partymembercid[.@k];
								}
								set dead_status,0,$@partymembercid[.@k];
							detachrid;
						}
					}
					announce "Team [ "+.name$+" ] win the round.",0;
					if($br_party_mode$ == "Battle Royale"){
						query_sql "UPDATE `battle_royale_party` SET `points` = `points` + 10 WHERE `party_id` = '"+.@countteam[.@i]+"'";
					}
					deletearray $@partymembercount;
					deletearray $@partymemberaid;
					deletearray $@partymembercid;
					donpcevent "Battle_Royale::OnBattlePartyEnd";
				}
			}
		}else if(.@countteams > 1){
			for(set .@i,0; .@i < .@countteams; set .@i,.@i+1) {
				if($br_party){
					// get the charID and accountID of character's party members
					getpartymember .@countteam[.@i], 1;
					getpartymember .@countteam[.@i], 2;
					
					for ( .@k = 0; .@k < $@partymembercount; .@k++ ){
						if ( isloggedin( $@partymemberaid[.@k], $@partymembercid[.@k] ) ){
							attachrid($@partymemberaid[.@k]);
							if(strcharinfo(3) != "guild_vs4" && dead_status == 0){
								query_sql "SELECT `alive` FROM `battle_royale_party` WHERE `party_id` = '"+.@countteam[.@i]+"'",.@alive;
								if(.@alive >= 1){
									query_sql "UPDATE `battle_royale_party` SET `alive` = `alive` - 1 WHERE `party_id` = '"+.@countteam[.@i]+"'";
								}else if(.@alive < 1){
									query_sql "UPDATE `battle_royale_party` SET `match_status` = '0' WHERE `party_id` = '"+.@countteam[.@i]+"'";
								}
								set dead_status,1,$@partymembercid[.@k];
							}
							detachrid;
						}
					}

					deletearray $@partymembercount;
					deletearray $@partymemberaid;
					deletearray $@partymembercid;
				}
			}
		}
		
		deletearray .@countteam;
		deletearray .name$;
		sleep 3000;
		if(!$br_party) end;
		goto OnBattlePartyCheck;
	}
end;

OnBattlePartyEndTimer:
		if($br_party_mode$ == "Round Robin"){
			query_sql "SELECT `party_id`, `name`, `alive` FROM `battle_royale_party` WHERE `alive` > 0 AND `match_status` = '1'",.@countteam, .name$, .@alive;
			set .@countteams, getarraysize(.@countteam);
			for(set .@i,0; .@i < .@countteams; set .@i,.@i+1) {
				if($br_party){
					// get the charID and accountID of character's party members
					getpartymember .@countteam[.@i], 1;
					getpartymember .@countteam[.@i], 2;
					
					for ( .@k = 0; .@k < $@partymembercount; .@k++ ){
						if ( isloggedin( $@partymemberaid[.@k], $@partymembercid[.@k] ) ){
							attachrid($@partymemberaid[.@k]);
								if(strcharinfo(3) == "guild_vs4"){
									warp "SavePoint",0,0,$@partymembercid[.@k];
								}
								set dead_status,0,$@partymembercid[.@k];
							detachrid;
						}
					}
					deletearray $@partymembercount;
					deletearray $@partymemberaid;
					deletearray $@partymembercid;
				}
			}
			if(.@alive[0] > .@alive[1]){
				announce "Team [ "+.name$[0]+" ] win the round.",0;
			}else if(.@alive[0] < .@alive[1]){
				announce "Team [ "+.name$[1]+" ] win the round.",0;
			}else if(.@alive[0] == .@alive[1]){
				announce "The match is draw.",0;
			}
			deletearray .@countteam;
			deletearray .name$;
			donpcevent "Battle_Royale::OnBattlePartyEnd";
		}else if($br_party_mode$ == "Battle Royale"){
			query_sql "SELECT `party_id` FROM `battle_royale_party`",.@partyid;
			if(getarraysize(.@partyid) >= 1){
				for(set .@i,0; .@i < getarraysize(.@partyid); set .@i,.@i+1) {
						// get the charID and accountID of character's party members
						getpartymember .@partyid[.@i], 1;
						getpartymember .@partyid[.@i], 2;
						
						for ( .@k = 0; .@k < $@partymembercount; .@k++ ){
							if ( isloggedin( $@partymemberaid[.@k], $@partymembercid[.@k] ) ){
								attachrid($@partymemberaid[.@k]);
									if(strcharinfo(3) == "guild_vs4"){
										warp "SavePoint",0,0,$@partymembercid[.@k];
									}
									set dead_status,0,$@partymembercid[.@k];
								detachrid;
							}
						}
						
						deletearray $@partymembercount;
						deletearray $@partymemberaid;
						deletearray $@partymembercid;
						
				}
			}
			deletearray .@partyid;
			donpcevent "Battle_Royale::OnBattlePartyEnd";
		}
end;

OnBattlePartyEnd:
	setnpctimer 0;
	stopnpctimer;
	set $br_party,0;
	if(getmapflag("guild_vs4",mf_pvp)){
		pvpoff "guild_vs4";
	}
	if($br_party_mode$ == "Round Robin"){
		query_sql "UPDATE `battle_royale_party` SET `match_round_count` = `match_round_count` + 1 WHERE `party_id` = '"+.party_team1_id+"'";
		
		query_sql "SELECT `match_round_count` FROM `battle_royale_party` WHERE `party_id` = '"+.party_team1_id+"'",.@mcount;
		
		query_sql "SELECT COUNT(`match_round_count`) FROM `battle_royale_party` WHERE `match_round_status` = '0' AND `match_round_count` = '0' AND `party_id` != '"+.party_team1_id+"'",.@mmcount;
		
		if(.@mcount >= .@mmcount ){
			query_sql "UPDATE `battle_royale_party` SET `match_round_status`= 1 WHERE `party_id` = '"+.party_team1_id+"'";
			query_sql "SELECT `party_id` FROM `battle_royale_party` WHERE `match_round_status` = 0",.@pid;
			if(.@pid <= 1){
				donpcevent "Battle_Royale::OnBattleParty";
				end;
			}
		}
		initnpctimer;
	}
	query_sql "UPDATE `battle_royale_party` SET `alive` = '0', `match_status` = '0'";
end;

OnBattleParty:
	if($br_party_mode$ == "Round Robin"){
		
		// Count the number of teams registered.
		query_sql "SELECT `party_id` FROM `battle_royale_party` WHERE `match_round_status` = '0'",.@p_count;
		
		if(getarraysize(.@p_count) <= 1){
			set .round_completed, .round_completed + 1;
			set $br_party,0;
			if($br_party_rounds == .round_completed){
				announce "The tournament with round robin matches are completed. The result will be announced by the admin.",0;
				query_sql "UPDATE `battle_royale_party` SET `match_round_status` = '1'";
				set $br_party_mode$, "";
				set .party_team1_id, 0;
				set .party_team1_name$, "";
				set .party_team2_id, 0;
				set .party_team2_name$, "";
				set .match_count, 0;
			}else{
				announce "Tournanament Round "+.round_completed+" has ended and moving up on the next round.",0;
				query_sql "UPDATE `battle_royale_party` SET `alive` = '0',`match_round_count` = '0', `match_round_status` = '0', `match_status` = '0'";
			}
			setnpctimer 0;
			stopnpctimer;
			initnpctimer;
			end;
		}
		
		// Select a team who will play the match
		query_sql "SELECT `party_id`, `name`, `match_round_count` FROM `battle_royale_party` WHERE `match_round_status` = '0' ORDER BY `id` DESC LIMIT 1",.@partyid, .@pname$, .@match_count;
		
		set .party_team1_id, .@partyid;
		set .party_team1_name$, .@pname$;
		set .match_count, .@match_count;
		
		// get the charID and accountID of character's party members
		getpartymember .@partyid, 1;
		getpartymember .@partyid, 2;
		
		for ( .@k = 0; .@k < $@partymembercount; .@k++ ){
			if ( isloggedin( $@partymemberaid[.@k], $@partymembercid[.@k] ) ){
				set dead_status,0,$@partymembercid[.@k];
				warp "guild_vs4",8,49,$@partymembercid[.@k];
				set .count, .count + 1;
			}
		}

		query_sql "UPDATE `battle_royale_party` SET `alive` = '"+.count+"', `match_status` = '1' WHERE `party_id` = '"+.party_team1_id+"'";
		set .count,0;
		deletearray $@partymembercount;
		deletearray $@partymemberaid;
		deletearray $@partymembercid;
		deletearray .@partyid;
		
		query_sql "SELECT `party_id`, `name` FROM `battle_royale_party` WHERE `party_id` != '"+.party_team1_id+"' AND `match_round_status` = '0'",.@partyid, .@pname$;

		if(.match_count == 0){
			set .@party, .match_count;
		}else{
			set .@party, getarraysize(.@partyid) - .match_count;
		}
		
		set .party_team2_id, .@partyid[.@party];
		set .party_team2_name$, .@pname$[.@party];
		
		// get the charID and accountID of character's party members
		getpartymember .@partyid[.@party], 1;
		getpartymember .@partyid[.@party], 2;
		
		for ( .@k = 0; .@k < $@partymembercount; .@k++ ){
			if ( isloggedin( $@partymemberaid[.@k], $@partymembercid[.@k] ) ){
				set dead_status,0,$@partymembercid[.@k];
				warp "guild_vs4",91,49,$@partymembercid[.@k];
				set .count, .count + 1;
			}
		}
		
		query_sql "UPDATE `battle_royale_party` SET `alive` = '"+.count+"', `match_status` = '1' WHERE `party_id` = '"+.party_team2_id+"'";
		set .count,0;
		deletearray $@partymembercount;
		deletearray $@partymemberaid;
		deletearray $@partymembercid;
		deletearray .@partyid;
		announce "Team "+.party_team1_name$+" Vs Team "+.party_team2_name$+" match has started.",0;
		if(!getmapflag("guild_vs4",mf_pvp)){
			pvpon "guild_vs4";
		}
	}else if($br_party_mode$ == "Battle Royale"){
		query_sql "SELECT `party_id` FROM `battle_royale_party` ORDER BY RAND()",.@partyid;
		for(set .@i,0; .@i < getarraysize(.@partyid); set .@i,.@i+1) {
			// get the charID and accountID of character's party members
			getpartymember .@partyid[.@i], 1;
			getpartymember .@partyid[.@i], 2;
			
			for ( .@k = 0; .@k < $@partymembercount; .@k++ ){
				if ( isloggedin( $@partymemberaid[.@k], $@partymembercid[.@k] ) ){
					if((.@i+1) == 1){
						warp "guild_vs4",8,49,$@partymembercid[.@k];
					}else if((.@i+1) == 2){
						warp "guild_vs4",91,49,$@partymembercid[.@k];
					}else if((.@i+1) == 3){
						warp "guild_vs4",50,91,$@partymembercid[.@k];
					}else if((.@i+1) == 4){
						warp "guild_vs4",50,7,$@partymembercid[.@k];
					}else if((.@i+1) == 5){
						warp "guild_vs4",33,31,$@partymembercid[.@k];
					}else if((.@i+1) == 6){
						warp "guild_vs4",66,68,$@partymembercid[.@k];
					}else if((.@i+1) == 7){
						warp "guild_vs4",68,33,$@partymembercid[.@k];
					}else if((.@i+1) == 8){
						warp "guild_vs4",31,66,$@partymembercid[.@k];
					}else if((.@i+1) == 9){
						warp "guild_vs4",31,33,$@partymembercid[.@k];
					}else if((.@i+1) == 10){
						warp "guild_vs4",68,66,$@partymembercid[.@k];
					}
					set .count, .count + 1;
				}
			}
			
			query_sql "UPDATE `battle_royale_party` SET `alive` = '"+.count+"', `match_status` = '1' WHERE `party_id` = '"+.@partyid[.@i]+"'";
			set .count,0;
			deletearray $@partymembercount;
			deletearray $@partymemberaid;
			deletearray $@partymembercid;
		}
	}
	
end;

OnDoRank:
	if($br_solo == 1 && strcharinfo(3) == "guild_vs1"){
		query_sql "SELECT `name`, `points` FROM `Battle_Royale` ORDER BY `points` DESC LIMIT 10", .name$, .@points;
		
		if(!getarraysize(.name$)){
			dispbottom "** NO AVAILABLE DATA **";	
		}else{
			dispbottom "** TOP 10 PLAYER **]";	
			for(set .@i,0; .@i < getarraysize(.name$); set .@i,.@i+1) {
				dispbottom "[ Rank "+(.@i+1)+" ] "+.name$[.@i]+" [ "+.@points[.@i]+" ]";
			}
		}
	}
end;

OnPCDieEvent:
	if($br_party == 1 && strcharinfo(3) == "guild_vs4"){
		sleep2 1000;
		warp "SavePoint",0,0;
	}
end;

OnPCKillEvent:
	if($br_solo == 1 && strcharinfo(3) == "guild_vs1"){
		set .@killer_chid, getcharid(0);
		set .@killer_acid, getcharid(3);
		set .@killer_name$, strcharinfo(0);
		
		attachrid(killedrid);
			sleep2 1000;
			//atcommand "@alive";
			warp "guild_vs1",0,0;
			percentheal 100,100;
			specialeffect2 37; sc_start SC_INCREASEAGI,120000,10;
			specialeffect2 42; sc_start SC_BLESSING,120000,10;
			query_sql "SELECT `char_id`,`points` FROM `Battle_Royale` WHERE `char_id` = '"+getcharid(0)+"'", .@killed, .@points;
			if(!.@killed){
				query_sql "INSERT INTO `Battle_Royale`(`account_id`, `char_id`, `name`) VALUES ('"+getcharid(3)+"','"+getcharid(0)+"','"+strcharinfo(0)+"')";
				set .@points, 1;
			}else{
				if(!.@points){
					query_sql "UPDATE `Battle_Royale` SET `points` = 0 WHERE `char_id` = '"+getcharid(0)+"'";
				}else{
					query_sql "UPDATE `Battle_Royale` SET `points` = `points` - 1 WHERE `char_id` = '"+getcharid(0)+"'";
				}
			}
		detachrid;

		query_sql "SELECT `char_id` FROM `Battle_Royale` WHERE `char_id` = '"+.@killer_chid+"'", .@killer, .@kpoints;
		if(!.@killer){
			query_sql "INSERT INTO `Battle_Royale`(`account_id`, `char_id`, `name`, `points`) VALUES ('"+.@killer_acid+"','"+.@killer_chid+"','"+.@killer_name$+"', 2)";
		}else{
			if(!.@points){
				set .@addpoints, 0;
			}else{
				set .@addpoints, 1;
			}
			query_sql "UPDATE `Battle_Royale` SET `points` = `points` + "+.@addpoints+" WHERE `char_id` = '"+.@killer_chid+"'";
		}

	}else if($br_party == 1 && strcharinfo(3) == "guild_vs4"){
		set .@k_party, getcharid(1);
		if($br_party_mode$ == "Round Robin"){
			query_sql "SELECT `party_id` FROM `battle_royale_party` WHERE `party_id` = '"+.@k_party+"' AND `match_status` = '1'",.@killer_partyid;
		}else if($br_party_mode$ == "Battle Royale"){
			query_sql "SELECT `party_id` FROM `battle_royale_party` WHERE `party_id` = '"+.@k_party+"'",.@killer_partyid;
		}
		if(.@killer_partyid){
			attachrid(killedrid);
				if($br_party_mode$ == "Round Robin"){
					query_sql "SELECT `party_id` FROM `battle_royale_party` WHERE `party_id` = '"+getcharid(1)+"' AND `match_status` = '1'",.@killed_partyid;
				}else if($br_party_mode$ == "Battle Royale"){
					query_sql "SELECT `party_id` FROM `battle_royale_party` WHERE `party_id` = '"+getcharid(1)+"'",.@killed_partyid;
				}
					
				if(.@killed_partyid){
					query_sql "UPDATE `battle_royale_party` SET `points` = `points` + 1 WHERE `party_id` = '"+.@killer_partyid+"'";
				}
			detachrid;
			
		}
		deletearray .@killer_partyid;
		deletearray .@killed_partyid;
	}
end;

OnTimer2000:
	mapannounce "poring_w02","Teams have 2 minutes to prepare for the match.",0;
	end;
	
OnTimer60000:
	mapannounce "poring_w02","1 minute left to prepare and don't logout.",0;
	end;
	
OnTimer118000:
	mapannounce "poring_w02","Get ready to deploy.",0;
	end;
OnTimer120000:
	set $br_party,1;
	donpcevent "Battle_Royale::OnBattleParty";
	donpcevent "Battle_Royale::OnBattlePartyCheck";
	end;
	
OnTimer122000:
	mapannounce "guild_vs4","You have 7 minutes to finish the match.",0;
	end;
	
OnTimer240000:
	mapannounce "guild_vs4","You have 5 minutes to finish the match.",0;
	end;
	
OnTimer360000:
	mapannounce "guild_vs4","You have 3 minutes to finish the match.",0;
	end;

OnTimer480000:
	mapannounce "guild_vs4","You have 1 minute to finish the match.",0;
	end;
	
OnTimer510000:
	mapannounce "guild_vs4","You have 30 seconds to finish the match.",0;
	end;
OnTimer530000:
	mapannounce "guild_vs4","You have 10 seconds to finish the match.",0;
	end;
OnTimer535000:
	mapannounce "guild_vs4","Match will end in 5.",0;
	end;
OnTimer536000:
	mapannounce "guild_vs4","4",0;
	end;
OnTimer537000:
	mapannounce "guild_vs4","3",0;
	end;
OnTimer538000:
	mapannounce "guild_vs4","2",0;
	end;
OnTimer539000:
	mapannounce "guild_vs4","1",0;
	end;
OnTimer540000:
	donpcevent "Battle_Royale::OnBattlePartyEndTimer";
	end;
}

///////////////////////////////
// Party Duplicate Job Checker
///////////////////////////////
function	script	party_has_duplicate_job	{
    set .@party_id, getarg(0);

    // Need to have a party.
    if ( !.@party_id )
    {
            return -1;
    }

    // Loading party members variables
    getpartymember .@party_id, 1;
    getpartymember .@party_id, 2;

    // Keep rid attached.
    set .@rid, playerattached();


    // Check all members
    for ( set .@i,0; .@i<$@partymembercount; set .@i, .@i+1 )
    {

        // Online user
        if ( isloggedin( $@partymemberaid[.@i], $@partymembercid[.@i]) )
        {
            // Attach the member to access "Class"
            attachrid( $@partymemberaid[.@i] );
			savepoint $mapSave$, $@mapSaveCordX, $@mapSaveCordY;
            if ( compare( .@tmp_class$ + "|", "|" + Class + "|" ) )
            {
                if ( .@rid )
                    attachrid(.@rid);
                else
                    detachrid;
                return 1;
            }
            set .@tmp_class$, .@tmp_class$ + "|" + Class;
        }

        // Offline user (use sql)
        else
        {
            set .@sql$, .@sql$ + ( .@sql_i ? "OR " : "" ) + "`char_id`='" + $@partymembercid[.@i] + "' ";
            set .@sql_i, .@sql_i + 1;
        }
    }

    // SQL for offline users
    if ( getstrlen(.@sql$) )
    {
        // get class from offline members
        set .@count, query_sql("SELECT `class` FROM `char` WHERE " + .@sql$, .@class );

        // Check the class.
        for ( set .@i, 0; .@i<.@count; set .@i, .@i+1 )
        {
            if ( compare( .@tmp_class$ + "|", "|" + .@class[.@i] + "|" ) )
            {
                if ( .@rid )
                    attachrid(.@rid);
                else
                    detachrid;
                return 1;
            }
            set .@tmp_class$, .@tmp_class$ + "|" + .@class[.@i];
        }
    }

    // Restore RID.
    if ( .@rid )
        attachrid(.@rid);
    else
        detachrid;

    return 0;
}


poring_w02,167,184,5	script	Kafra Employee::kaf_battle_royale	113,{
	cutin "kafra_05",2;
	callfunc "F_KafSet";
	mes "[Kafra Employee]";
	mes "The Kafra Corporation";
	mes "is always working to provide";
	mes "you with convenient services.";
	mes "How may I be of assistance?";
	callfunc "F_Kafra",5,2,1,20,600;
}

poring_w02,172,184,3	trader	Tool Dealer#td_battle_royale	4_M_03,{
OnInit:
	sellitem "Arrow";
	sellitem "Silver_Arrow";
	sellitem "Fire_Arrow";
	sellitem "Crystal_Arrow";
	sellitem "Arrow_Of_Wind";
	sellitem "Spectacles";
	sellitem "Red_Potion";
	sellitem "Orange_Potion";
	sellitem "Yellow_Potion";
	sellitem "White_Potion";
	sellitem "Green_Potion";
	sellitem "Panacea";
	sellitem "Wing_Of_Fly";
	sellitem "Wing_Of_Butterfly";
	sellitem "Booby_Trap";
	sellitem "Center_Potion";
	sellitem "Awakening_Potion";
	sellitem "Berserk_Potion";
	sellitem "Blue_Gemstone";
}

poring_w02,160,176,4	script	BattleRoyaleWarp	WARPNPC,3,3,{
	OnInit:
		if($br_party || $br_solo){
			disablenpc "BattleRoyaleWarp";
		}
	end;
	
	OnTouch:
		savepoint "prontera",116,73;	
		warp "SavePoint",0,0;
	end;
}

poring_w02	mapflag	noteleport
poring_w02	mapflag	nomemo
poring_w02	mapflag	nobranch
poring_w02	mapflag	notrade
poring_w02	mapflag	nodrop
poring_w02	mapflag	nochat
poring_w02	mapflag	novending
poring_w02	mapflag	noicewall
poring_w02	mapflag	partylock


guild_vs1	mapflag	nowarpto
guild_vs1	mapflag	nowarp
guild_vs1	mapflag	noteleport
guild_vs1	mapflag	nosave
guild_vs1	mapflag	nomemo
guild_vs1	mapflag	nobranch
guild_vs1	mapflag	pvp_noparty
guild_vs1	mapflag	pvp_noguild
guild_vs1	mapflag	noreturn
guild_vs1	mapflag	notrade
guild_vs1	mapflag	nodrop
guild_vs1	mapflag	nochat
guild_vs1	mapflag	novending
guild_vs1	mapflag	noicewall
guild_vs1	mapflag	restricted	10


guild_vs4	mapflag	nowarpto
guild_vs4	mapflag	nowarp
guild_vs4	mapflag	noteleport
guild_vs4	mapflag	nosave
guild_vs4	mapflag	nomemo
guild_vs4	mapflag	nobranch
guild_vs4	mapflag	noreturn
guild_vs4	mapflag	notrade
guild_vs4	mapflag	nodrop
guild_vs4	mapflag	nochat
guild_vs4	mapflag	novending
guild_vs4	mapflag	noicewall
guild_vs4	mapflag	partylock
guild_vs4	mapflag	restricted	10